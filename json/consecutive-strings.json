{
  "id": "56a5d994ac971f1ac500003e",
  "name": "Consecutive strings",
  "slug": "consecutive-strings",
  "category": "reference",
  "publishedAt": "2016-01-25T08:15:25.087Z",
  "approvedAt": "2016-03-10T05:33:31.574Z",
  "languages": [
    "ruby",
    "python",
    "javascript",
    "coffeescript",
    "haskell",
    "clojure",
    "csharp",
    "java",
    "elixir",
    "cpp",
    "php",
    "typescript",
    "crystal",
    "fsharp",
    "c",
    "ocaml",
    "rust",
    "swift",
    "go",
    "r",
    "shell",
    "kotlin",
    "powershell",
    "julia",
    "scala",
    "nim",
    "reason",
    "racket",
    "dart",
    "haxe",
    "pascal",
    "raku",
    "lua",
    "perl",
    "elm",
    "cobol",
    "d",
    "erlang",
    "prolog"
  ],
  "url": "https://www.codewars.com/kata/56a5d994ac971f1ac500003e",
  "rank": {
    "id": -6,
    "name": "6 kyu",
    "color": "yellow"
  },
  "createdAt": "2016-01-25T08:15:16.379Z",
  "createdBy": {
    "username": "g964",
    "url": "https://www.codewars.com/users/g964"
  },
  "approvedBy": "myjinxin2015",
  "description": "You are given an array(list) `strarr` of strings and an integer `k`. Your task is to return the **first** longest string\nconsisting of k **consecutive** strings taken in the array.\n\n#### Examples:\n```\nstrarr = [\"tree\", \"foling\", \"trashy\", \"blue\", \"abcdef\", \"uvwxyz\"], k = 2\n\nConcatenate the consecutive strings of strarr by 2, we get:\n\ntreefoling   (length 10)  concatenation of strarr[0] and strarr[1]\nfolingtrashy (\"      12)  concatenation of strarr[1] and strarr[2]\ntrashyblue   (\"      10)  concatenation of strarr[2] and strarr[3]\nblueabcdef   (\"      10)  concatenation of strarr[3] and strarr[4]\nabcdefuvwxyz (\"      12)  concatenation of strarr[4] and strarr[5]\n\nTwo strings are the longest: \"folingtrashy\" and \"abcdefuvwxyz\".\nThe first that came is \"folingtrashy\" so \nlongest_consec(strarr, 2) should return \"folingtrashy\".\n\nIn the same way:\nlongest_consec([\"zone\", \"abigail\", \"theta\", \"form\", \"libe\", \"zas\", \"theta\", \"abigail\"], 2) --> \"abigailtheta\"\n```\nn being the length of the string array, if `n = 0` or `k > n` or `k <= 0` return \"\" (return `Nothing` in Elm, \"nothing\" in Erlang).\n\n#### Note\nconsecutive strings : follow one after another without an interruption",
  "apiVersion": 2,
  "tags": [
    "Fundamentals"
  ],
  "totalAttempts": 419745,
  "totalCompleted": 57035,
  "totalStars": 2627
}