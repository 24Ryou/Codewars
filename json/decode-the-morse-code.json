{
  "id": "54b724efac3d5402db00065e",
  "name": "Decode the Morse code ",
  "slug": "decode-the-morse-code",
  "category": "algorithms",
  "publishedAt": "2015-01-15T02:40:31.646Z",
  "approvedAt": "2015-02-02T19:12:12.498Z",
  "languages": [
    "python",
    "javascript",
    "ruby",
    "java",
    "csharp",
    "typescript",
    "php",
    "haskell",
    "cpp",
    "coffeescript",
    "elixir",
    "go",
    "rust",
    "kotlin",
    "scala",
    "elm",
    "lua",
    "c",
    "julia",
    "swift",
    "nasm",
    "fsharp",
    "racket"
  ],
  "url": "https://www.codewars.com/kata/54b724efac3d5402db00065e",
  "rank": {
    "id": -6,
    "name": "6 kyu",
    "color": "yellow"
  },
  "createdAt": "2015-01-15T02:24:47.518Z",
  "createdBy": {
    "username": "jolaf",
    "url": "https://www.codewars.com/users/jolaf"
  },
  "approvedBy": "jhoffner",
  "description": "<div style=\"border:1px solid;position:relative;padding:1ex 1ex 1ex 11.1em;\"><div style=\"position:absolute;left:0;top:0;bottom:0; width:10em; padding:1ex;text-align:center;border:1px solid;margin:0 1ex 0 0;color:#000;background-color:#eee;font-variant:small-caps\">Part of Series 1/3</div><div>This kata is part of a series on the Morse code. After you solve this kata, you may move to the <a href=\"/kata/decode-the-morse-code-advanced\">next one</a>.</div></div><br>In this kata you have to write a simple <a href=\"https://en.wikipedia.org/wiki/Morse_code\">Morse code</a> decoder. While the Morse code is now mostly superseded by voice and digital data communication channels, it still has its use in some applications around the world.\n\nThe Morse code encodes every character as a sequence of \"dots\" and \"dashes\". For example, the letter <code>A</code> is coded as <code>\u00b7\u2212</code>, letter <code>Q</code> is coded as <code>\u2212\u2212\u00b7\u2212</code>, and digit <code>1</code> is coded as <code>\u00b7\u2212\u2212\u2212\u2212</code>. The Morse code is case-insensitive, traditionally capital letters are used. When the message is written in Morse code, a single space is used to separate the character codes and 3 spaces are used to separate words. For example, the message <code>HEY JUDE</code> in Morse code is <code>\u00b7\u00b7\u00b7\u00b7 \u00b7 \u2212\u00b7\u2212\u2212 \u00a0 \u00b7\u2212\u2212\u2212 \u00b7\u00b7\u2212 \u2212\u00b7\u00b7 \u00b7</code>.\n\n**NOTE:** Extra spaces before or after the code have no meaning and should be ignored.\n\nIn addition to letters, digits and some punctuation, there are some special service codes, the most notorious of those is the international distress signal <a href=\"https://en.wikipedia.org/wiki/SOS\">SOS</a> (that was first issued by <a href=\"https://en.wikipedia.org/wiki/RMS_Titanic\">Titanic</a>), that is coded as <code>\u00b7\u00b7\u00b7\u2212\u2212\u2212\u00b7\u00b7\u00b7</code>. These special codes are treated as single special characters, and usually are transmitted as separate words.\n\nYour task is to implement a function that would take the morse code as input and return a decoded human-readable string.\n\nFor example:\n\n```coffeescript\ndecodeMorse('.... . -.--   .--- ..- -.. .')\n//should return \"HEY JUDE\"\n```\n```cpp\ndecodeMorse('.... . -.--   .--- ..- -.. .')\n//should return \"HEY JUDE\"\n```\n```csharp\nMorseCodeDecoder.Decode(\".... . -.--   .--- ..- -.. .\")\n//should return \"HEY JUDE\"\n```\n```fsharp\ndecodeMorse \".... . -.--   .--- ..- -.. .\"\n// should return \"HEY JUDE\"\n```\n```elixir\nMorseCode.decode('.... . -.--   .--- ..- -.. .')\n#=> \"HEY JUDE\"\n```\n```elm\nMorseCode.decode \".... . -.--   .--- ..- -.. .\"\n--should return \"HEY JUDE\"\n```\n```go\nDecodeMorse(\".... . -.--   .--- ..- -.. .\")\n// should return \"HEY JUDE\"\n```\n```haskell\ndecodeMorse \".... . -.--   .--- ..- -.. .\"\n--should return \"HEY JUDE\"\n```\n```java\nMorseCodeDecoder.decode(\".... . -.--   .--- ..- -.. .\")\n//should return \"HEY JUDE\"\n```\n```javascript\ndecodeMorse('.... . -.--   .--- ..- -.. .')\n//should return \"HEY JUDE\"\n```\n```kotlin\ndecodeMorse('.... . -.--   .--- ..- -.. .')\n//should return \"HEY JUDE\"\n```\n```php\ndecode_morse('.... . -.--   .--- ..- -.. .')\n//should return \"HEY JUDE\"\n```\n```python\ndecode_morse('.... . -.--   .--- ..- -.. .')\n#should return \"HEY JUDE\"\n```\n```racket\n(decode-morse \".... . -.--   .--- ..- -.. .\")\n; should return \"HEY JUDE\"\n```\n```ruby\ndecodeMorse('.... . -.--   .--- ..- -.. .')\n#should return \"HEY JUDE\"\n```\n```swift\ndecodeMorse('.... . -.--   .--- ..- -.. .')\n//should return \"HEY JUDE\"\n```\n```typescript\ndecodeMorse('.... . -.--   .--- ..- -.. .')\n//should return \"HEY JUDE\"\n```\n```rust\ndecode_morse(\".... . -.--   .--- ..- -.. .\")\n//should return \"HEY JUDE\"\n```\n```scala\nMorseDecoder.decode(\".... . -.--   .--- ..- -.. .\")\n//should return \"HEY JUDE\"\n```\n```c\ndecode_morse(\".... . -.--   .--- ..- -.. .\")\n// should return \"HEY JUDE\"\n```\n```julia\ndecodemorse(\".... . -.--   .--- ..- -.. .\")\n# should return \"HEY JUDE\"\n```\n```NASM\na call to decode_morse with RDI set to the address of \".... . -.--   .--- ..- -.. .\"\nshould fill the buffer pointed to by RDI with db 'HEY JUDE',0\n```\n\n**NOTE:** For coding purposes you have to use ASCII characters `.` and `-`, not Unicode characters.\n\nThe Morse code table is preloaded for you as a dictionary, feel free to use it:\n+ Coffeescript/C++/Go/JavaScript/Julia/PHP/Python/Ruby/TypeScript: `MORSE_CODE['.--']`\n+ C#: `MorseCode.Get(\".--\")` (returns `string`)\n+ F#: `MorseCode.get \".--\"` (returns `string`)\n+ Elixir: `@morse_codes` variable (from `use MorseCode.Constants`). Ignore the unused variable warning for `morse_codes` because it's no longer used and kept only for old solutions.\n+ Elm: `MorseCodes.get : Dict String String`\n+ Haskell: `morseCodes ! \".--\"` (Codes are in a `Map String String`)\n+ Java: `MorseCode.get(\".--\")`\n+ Kotlin: `MorseCode[\".--\"] ?: \"\"` or `MorseCode.getOrDefault(\".--\", \"\")`\n+ Racket: `morse-code` (a hash table)\n+ Rust: `MORSE_CODE`\n+ Scala: `morseCodes(\".--\")`\n+ Swift: `MorseCode[\".--\"] ?? \"\"` or `MorseCode[\".--\", default: \"\"]`\n* C: provides parallel arrays, i.e. `morse[2] == \"-.-\"` for `ascii[2] == \"C\"`\n+ NASM: a table of pointers to the morsecodes, and a corresponding list of ascii symbols\n\nAll the test strings would contain valid Morse code, so you may skip checking for errors and exceptions. In C#, tests will fail if the solution code throws an exception, please keep that in mind. This is mostly because otherwise the engine would simply ignore the tests, resulting in a \"valid\" solution.\n\nGood luck!\n\nAfter you complete this kata, you may try yourself at <a href=\"http://www.codewars.com/kata/decode-the-morse-code-advanced\">Decode the Morse code, advanced</a>.\n",
  "apiVersion": 2,
  "tags": [
    "Algorithms"
  ],
  "totalAttempts": 893208,
  "totalCompleted": 87159,
  "totalStars": 4308
}