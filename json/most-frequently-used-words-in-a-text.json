{
  "id": "51e056fe544cf36c410000fb",
  "name": "Most frequently used words in a text",
  "slug": "most-frequently-used-words-in-a-text",
  "category": "algorithms",
  "publishedAt": "2013-07-26T22:42:11.102Z",
  "approvedAt": "2013-12-19T18:25:33.862Z",
  "languages": [
    "ruby",
    "python",
    "javascript",
    "java",
    "kotlin",
    "csharp",
    "haskell"
  ],
  "url": "https://www.codewars.com/kata/51e056fe544cf36c410000fb",
  "rank": {
    "id": -4,
    "name": "4 kyu",
    "color": "blue"
  },
  "createdAt": "2013-07-12T19:20:30.979Z",
  "createdBy": {
    "username": "markprzepiora",
    "url": "https://www.codewars.com/users/markprzepiora"
  },
  "approvedBy": "jhoffner",
  "description": "Write a function that, given a string of text (possibly with punctuation and line-breaks),\nreturns an array of the top-3 most occurring words, in descending order of the number of occurrences.\n\nAssumptions:\n------------\n\n- A word is a string of letters (A to Z) optionally containing one or more apostrophes (`'`) in ASCII.\n- Apostrophes can appear at the start, middle or end of a word (`'abc`, `abc'`, `'abc'`, `ab'c` are all valid)\n- Any other characters (e.g. `#`, `\\`, `/` , `.` ...) are not part of a word and should be treated as whitespace.\n- Matches should be case-insensitive, and the words in the result should be lowercased.\n- Ties may be broken arbitrarily.\n- If a text contains fewer than three unique words, then either the top-2 or top-1 words should be returned, or an empty array if a text contains no words.\n\nExamples:\n------------\n\n```\ntop_3_words(\"In a village of La Mancha, the name of which I have no desire to call to\nmind, there lived not long since one of those gentlemen that keep a lance\nin the lance-rack, an old buckler, a lean hack, and a greyhound for\ncoursing. An olla of rather more beef than mutton, a salad on most\nnights, scraps on Saturdays, lentils on Fridays, and a pigeon or so extra\non Sundays, made away with three-quarters of his income.\")\n# => [\"a\", \"of\", \"on\"]\n\ntop_3_words(\"e e e e DDD ddd DdD: ddd ddd aa aA Aa, bb cc cC e e e\")\n# => [\"e\", \"ddd\", \"aa\"]\n\ntop_3_words(\"  //wont won't won't\")\n# => [\"won't\", \"wont\"]\n```\n\n```if:java\nFor java users, the calls will actually be in the form: `TopWords.top3(String s)`, expecting you to return a `List<String>`.\n```\n\nBonus points (not really, but just for fun):\n------------\n\n1. Avoid creating an array whose memory footprint is roughly as big as the input text.\n2. Avoid sorting the entire array of unique words.",
  "apiVersion": 2,
  "tags": [
    "Strings",
    "Filtering",
    "Algorithms"
  ],
  "totalAttempts": 195239,
  "totalCompleted": 16872,
  "totalStars": 1418
}