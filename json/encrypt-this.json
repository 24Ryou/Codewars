{
  "id": "5848565e273af816fb000449",
  "name": "Encrypt this!",
  "slug": "encrypt-this",
  "category": "reference",
  "publishedAt": "2016-12-07T20:11:20.171Z",
  "approvedAt": "2017-12-02T15:01:42.667Z",
  "languages": [
    "haskell",
    "python",
    "ruby",
    "groovy",
    "swift",
    "c",
    "kotlin",
    "scala",
    "java",
    "javascript",
    "typescript",
    "coffeescript",
    "go",
    "csharp",
    "vb",
    "rust",
    "clojure",
    "lua",
    "php"
  ],
  "url": "https://www.codewars.com/kata/5848565e273af816fb000449",
  "rank": {
    "id": -6,
    "name": "6 kyu",
    "color": "yellow"
  },
  "createdAt": "2016-12-07T18:35:10.080Z",
  "createdBy": {
    "username": "suic",
    "url": "https://www.codewars.com/users/suic"
  },
  "approvedBy": "ZED.CWT",
  "description": "## Acknowledgments:\n\nI thank [yvonne-liu](https://www.codewars.com/users/yvonne-liu) for the idea and for the example tests :)\n\n## Description:\n\nEncrypt this!\n\nYou want to create secret messages which can be deciphered by the [Decipher this!](https://www.codewars.com/kata/decipher-this) kata. Here are the conditions:\n\n1. Your message is a string containing space separated words.\n2. You need to encrypt each word in the message using the following rules:\n    * The first letter must be converted to its ASCII code.\n    * The second letter must be switched with the last letter\n3. Keepin' it simple: There are no special characters in the input.\n\n## Examples:\n\n```haskell\nencryptThis \"Hello\" == \"72olle\"\nencryptThis \"good\" == \"103doo\"\nencryptThis \"hello world\" == \"104olle 119drlo\"\n```\n```python\nencrypt_this(\"Hello\") == \"72olle\"\nencrypt_this(\"good\") == \"103doo\"\nencrypt_this(\"hello world\") == \"104olle 119drlo\"\n```\n```ruby\nencrypt_this(\"Hello\") == \"72olle\"\nencrypt_this(\"good\") == \"103doo\"\nencrypt_this(\"hello world\") == \"104olle 119drlo\"\n```\n```groovy\nKata.encryptThis(\"Hello\") == \"72olle\"\nKata.encryptThis(\"good\") == \"103doo\"\nKata.encryptThis(\"hello world\") == \"104olle 119drlo\"\n```\n```scala\nEncrypt.encryptThis(\"Hello\") == \"72olle\"\nEncrypt.encryptThis(\"good\") == \"103doo\"\nEncrypt.encryptThis(\"hello world\") == \"104olle 119drlo\"\n```\n```java\nKata.encryptThis(\"Hello\") => \"72olle\"\nKata.encryptThis(\"good\") => \"103doo\"\nKata.encryptThis(\"hello world\") => \"104olle 119drlo\"\n```\n```javascript\nencryptThis(\"Hello\") === \"72olle\"\nencryptThis(\"good\") === \"103doo\"\nencryptThis(\"hello world\") === \"104olle 119drlo\"\n```\n```coffeescript\nencryptThis(\"Hello\") === \"72olle\"\nencryptThis(\"good\") === \"103doo\"\nencryptThis(\"hello world\") === \"104olle 119drlo\"\n```\n```c\nencrypt_this(\"Hello\") == \"72olle\"\nencrypt_this(\"good\") == \"103doo\"\nencrypt_this(\"hello world\") == \"104olle 119drlo\"\n```\n```cpp\nencrypt_this(\"Hello\") == \"72olle\"\nencrypt_this(\"good\") == \"103doo\"\nencrypt_this(\"hello world\") == \"104olle 119drlo\"\n```\n```go\nEncryptThis(\"Hello\") == \"72olle\"\nEncryptThis(\"good\") == \"103doo\"\nEncryptThis(\"hello world\") == \"104olle 119drlo\"\n```\n```csharp\nKata.EncryptThis(\"Hello\") == \"72olle\"\nKata.EncryptThis(\"good\") == \"103doo\"\nKata.EncryptThis(\"hello world\") == \"104olle 119drlo\"\n```\n```vb\nKata.EncryptThis(\"Hello\") = \"72olle\"\nKata.EncryptThis(\"good\") = \"103doo\"\nKata.EncryptThis(\"hello world\") = \"104olle 119drlo\"\n```\n```clojure\n(= (encrypt-this \"Hello\") \"72olle\")\n(= (encrypt-this \"good\" ) \"103doo\")\n(= (encrypt-this \"hello world\") \"104olle 119drlo\")\n```\n```rust\nencrypt_this(\"Hello\") == \"72olle\"\nencrypt_this(\"good\") == \"103doo\"\nencrypt_this(\"hello world\") == \"104olle 119drlo\"\n```\n```lua\nsolution.encrypt_this(\"Hello\") == \"72olle\"\nsolution.encrypt_this(\"good\") == \"103doo\"\nsolution.encrypt_this(\"hello world\") == \"104olle 119drlo\"\n```\n```php\nencryptThis(\"Hello\") === \"72olle\"\nencryptThis(\"good\") === \"103doo\"\nencryptThis(\"hello world\") === \"104olle 119drlo\"\n```\n",
  "apiVersion": 2,
  "tags": [
    "Fundamentals",
    "Strings",
    "Regular Expressions",
    "Arrays",
    "Ciphers",
    "Algorithms",
    "Cryptography",
    "Security"
  ],
  "totalAttempts": 72369,
  "totalCompleted": 15872,
  "totalStars": 613
}