{
  "id": "539a0e4d85e3425cb0000a88",
  "name": "A Chain adding function",
  "slug": "a-chain-adding-function",
  "category": "games",
  "publishedAt": "2014-06-12T20:32:13.546Z",
  "approvedAt": "2014-10-07T20:48:09.253Z",
  "languages": [
    "javascript",
    "python",
    "typescript",
    "ruby",
    "cpp"
  ],
  "url": "https://www.codewars.com/kata/539a0e4d85e3425cb0000a88",
  "rank": {
    "id": -5,
    "name": "5 kyu",
    "color": "yellow"
  },
  "createdAt": "2014-06-12T20:32:14.227Z",
  "createdBy": {
    "username": "gelus",
    "url": "https://www.codewars.com/users/gelus"
  },
  "approvedBy": "jhoffner",
  "description": "We want to create a function that will add numbers together when called in succession.\n\n```javascript\nadd(1)(2); // == 3\n```\n\n```ruby\nadd(1).(2); # equals 3\n```\n\n```python\nadd(1)(2) # equals 3\n```\n\nWe also want to be able to continue to add numbers to our chain.\n\n```javascript\nadd(1)(2)(3); // == 6\nadd(1)(2)(3)(4); //  == 10\nadd(1)(2)(3)(4)(5); // == 15\n```\n\n```ruby\nadd(1).(2).(3); # 6\nadd(1).(2).(3).(4); # 10\nadd(1).(2).(3).(4).(5); # 15\n```\n\n```python\nadd(1)(2)(3) # 6\nadd(1)(2)(3)(4); # 10\nadd(1)(2)(3)(4)(5) # 15\n```\n\nand so on.\n\nA single call should be equal to the number passed in.\n\n```javascript\nadd(1); // == 1\n```\n\n```ruby\nadd(1); # 1\n```\n\n```python\nadd(1) # 1\n```\n\nWe should be able to store the returned values and reuse them.\n\n```javascript\nvar addTwo = add(2);\naddTwo; // == 2\naddTwo + 5; // == 7\naddTwo(3); // == 5\naddTwo(3)(5); // == 10\n```\n\n```ruby\nvar addTwo = add(2);\naddTwo; # 2\naddTwo + 5; # 7\naddTwo(3); # 5\naddTwo(3).(5); # 10\n```\n\n```python\naddTwo = add(2)\naddTwo # 2\naddTwo + 5 # 7\naddTwo(3) # 5\naddTwo(3)(5) # 10\n```\n\nWe can assume any number being passed in will be valid whole number. ",
  "apiVersion": 2,
  "tags": [
    "Mathematics",
    "Functional Programming",
    "Puzzles"
  ],
  "totalAttempts": 100685,
  "totalCompleted": 21913,
  "totalStars": 2013
}