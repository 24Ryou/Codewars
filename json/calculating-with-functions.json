{
  "id": "525f3eda17c7cd9f9e000b39",
  "name": "Calculating with Functions",
  "slug": "calculating-with-functions",
  "category": "reference",
  "publishedAt": "2013-10-17T02:26:16.943Z",
  "approvedAt": "2013-12-22T00:22:56.492Z",
  "languages": [
    "javascript",
    "ruby",
    "python",
    "haskell",
    "factor"
  ],
  "url": "https://www.codewars.com/kata/525f3eda17c7cd9f9e000b39",
  "rank": {
    "id": -5,
    "name": "5 kyu",
    "color": "yellow"
  },
  "createdAt": "2013-10-17T01:35:22.283Z",
  "createdBy": {
    "username": "BattleRattle",
    "url": "https://www.codewars.com/users/BattleRattle"
  },
  "approvedBy": "BattleRattle",
  "description": "This time we want to write calculations using functions and get the results. Let's have a look at some examples:\n\n```javascript\nseven(times(five())); // must return 35\nfour(plus(nine())); // must return 13\neight(minus(three())); // must return 5\nsix(dividedBy(two())); // must return 3\n```\n```haskell\nseven $ times $ five   ->  35 :: Int\nfour $ plus $ nine     ->  13 :: Int\neight $ minus $ three  ->   5 :: Int\nsix $ dividedBy $ two  ->   3 :: Int\n```\n```ruby\nseven(times(five)) # must return 35\nfour(plus(nine)) # must return 13\neight(minus(three)) # must return 5\nsix(divided_by(two)) # must return 3\n```\n```python\nseven(times(five())) # must return 35\nfour(plus(nine())) # must return 13\neight(minus(three())) # must return 5\nsix(divided_by(two())) # must return 3\n```\n```factor\nseven multiplied-by five   ! must evaluate to 35\nfour plus nine             ! must evaluate to 13\neight minus three          ! must evaluate to 5\nsix divided-by two         ! must evaluate to 3\n```\n\nRequirements:\n~~~if:ruby,python\n* There must be a function for each number from 0 (\"zero\") to 9 (\"nine\")\n* There must be a function for each of the following mathematical operations: plus, minus, times, divided_by\n* Each calculation consist of exactly one operation and two numbers\n* The most outer function represents the left operand, the most inner function represents the right operand\n* Division should be **integer division**. For example, this should return `2`, not `2.666666...`:\n~~~\n~~~if:factor\n* There must be a word for each number from 0 (\"zero\") to 9 (\"nine\")\n* There must be a word for each of the following mathematical operations: plus, minus, multiplied-by, divided-by\n* Each calculation consist of exactly one operation and two numbers\n* The leftmost word represents the left operand, the rightmost word represents the right operand\n* Division should be **integer division**. For example, this should return `2`, not `2.666666...`:\n~~~\n~~~if-not:ruby,python,factor\n* There must be a function for each number from 0 (\"zero\") to 9 (\"nine\")\n* There must be a function for each of the following mathematical operations: plus, minus, times, dividedBy\n* Each calculation consist of exactly one operation and two numbers\n* The most outer function represents the left operand, the most inner function represents the right operand\n* Division should be **integer division**. For example, this should return `2`, not `2.666666...`:\n~~~\n\n```javascript\neight(dividedBy(three()));\n```\n```haskell\neight $ dividedBy $ three\n```\n```ruby\neight(divided_by(three))\n```\n```python\neight(divided_by(three()))\n```\n```factor\neight divided-by three\n```",
  "apiVersion": 2,
  "tags": [
    "Functional Programming"
  ],
  "totalAttempts": 213532,
  "totalCompleted": 55623,
  "totalStars": 4518
}