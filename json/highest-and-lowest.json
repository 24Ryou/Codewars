{
  "id": "554b4ac871d6813a03000035",
  "name": "Highest and Lowest",
  "slug": "highest-and-lowest",
  "category": "reference",
  "publishedAt": "2015-05-07T11:50:38.518Z",
  "approvedAt": "2015-05-20T03:59:32.168Z",
  "languages": [
    "csharp",
    "javascript",
    "python",
    "ruby",
    "java",
    "coffeescript",
    "haskell",
    "rust",
    "typescript",
    "fsharp",
    "go",
    "kotlin",
    "php",
    "crystal",
    "cpp",
    "elixir",
    "julia",
    "r",
    "clojure",
    "c",
    "cobol",
    "scala",
    "d",
    "lua"
  ],
  "url": "https://www.codewars.com/kata/554b4ac871d6813a03000035",
  "rank": {
    "id": -7,
    "name": "7 kyu",
    "color": "white"
  },
  "createdAt": "2015-05-07T11:21:44.905Z",
  "createdBy": {
    "username": "Deantwo",
    "url": "https://www.codewars.com/users/Deantwo"
  },
  "approvedBy": "dnolan",
  "description": "In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\n\n### Examples\n\n``` text\nInput: \"1 2 3 4 5\"   =>  Output: \"5 1\"\nInput: \"1 2 -3 4 5\"  =>  Output: \"5 -3\"\nInput: \"1 9 3 4 -5\"  =>  Output: \"9 -5\"\n```\n```php\nhighAndLow(\"1 2 3 4 5\");  // return \"5 1\"\nhighAndLow(\"1 2 -3 4 5\"); // return \"5 -3\"\nhighAndLow(\"1 9 3 4 -5\"); // return \"9 -5\"\n```\n```csharp\nKata.HighAndLow(\"1 2 3 4 5\");  // return \"5 1\"\nKata.HighAndLow(\"1 2 -3 4 5\"); // return \"5 -3\"\nKata.HighAndLow(\"1 9 3 4 -5\"); // return \"9 -5\"\n```\n```fsharp\nhighAndLow \"1 2 3 4 5\"  // return \"5 1\"\nhighAndLow \"1 2 -3 4 5\" // return \"5 -3\"\nhighAndLow \"1 9 3 4 -5\" // return \"9 -5\"\n```\n```javascript\nhighAndLow(\"1 2 3 4 5\");  // return \"5 1\"\nhighAndLow(\"1 2 -3 4 5\"); // return \"5 -3\"\nhighAndLow(\"1 9 3 4 -5\"); // return \"9 -5\"\n```\n```d\nhighAndLow(\"1 2 3 4 5\");  // return \"5 1\"\nhighAndLow(\"1 2 -3 4 5\"); // return \"5 -3\"\nhighAndLow(\"1 9 3 4 -5\"); // return \"9 -5\"\n```\n```c\nhigh_and_low(\"1 2 3 4 5\")  // return \"5 1\"\nhigh_and_low(\"1 2 -3 4 5\") // return \"5 -3\"\nhigh_and_low(\"1 9 3 4 -5\") // return \"9 -5\"\n```\n```cpp\nhighAndLow(\"1 2 3 4 5\");  // return \"5 1\"\nhighAndLow(\"1 2 -3 4 5\"); // return \"5 -3\"\nhighAndLow(\"1 9 3 4 -5\"); // return \"9 -5\"\n```\n```typescript\nhighAndLow(\"1 2 3 4 5\");  // return \"5 1\"\nhighAndLow(\"1 2 -3 4 5\"); // return \"5 -3\"\nhighAndLow(\"1 9 3 4 -5\"); // return \"9 -5\"\n```\n```coffeescript\nhighAndLow(\"1 2 3 4 5\")  # return \"5 1\"\nhighAndLow(\"1 2 -3 4 5\") # return \"5 -3\"\nhighAndLow(\"1 9 3 4 -5\") # return \"9 -5\"\n```\n```python\nhigh_and_low(\"1 2 3 4 5\")  # return \"5 1\"\nhigh_and_low(\"1 2 -3 4 5\") # return \"5 -3\"\nhigh_and_low(\"1 9 3 4 -5\") # return \"9 -5\"\n```\n```ruby\nhigh_and_low(\"1 2 3 4 5\")  # return \"5 1\"\nhigh_and_low(\"1 2 -3 4 5\") # return \"5 -3\"\nhigh_and_low(\"1 9 3 4 -5\") # return \"9 -5\"\n```\n```crystal\nhigh_and_low(\"1 2 3 4 5\")  # return \"5 1\"\nhigh_and_low(\"1 2 -3 4 5\") # return \"5 -3\"\nhigh_and_low(\"1 9 3 4 -5\") # return \"9 -5\"\n```\n```c\nhigh_and_low(\"1 2 3 4 5\", result)  // result \"5 1\"\nhigh_and_low(\"1 2 -3 4 5\", result) // result \"5 -3\"\nhigh_and_low(\"1 9 3 4 -5\", result) // result \"9 -5\"\n```\n```java\nhighAndLow(\"1 2 3 4 5\")  // return \"5 1\"\nhighAndLow(\"1 2 -3 4 5\") // return \"5 -3\"\nhighAndLow(\"1 9 3 4 -5\") // return \"9 -5\"\n```\n```haskell\nhighAndLow \"1 2 3 4 5\")  # return \"5 1\"\nhighAndLow \"1 2 -3 4 5\") # return \"5 -3\"\nhighAndLow \"1 9 3 4 -5\") # return \"9 -5\"\n```\n```go\nHighAndLow(\"1 2 3 4 5\")  // return \"5 1\"\nHighAndLow(\"1 2 -3 4 5\") // return \"5 -3\"\nHighAndLow(\"1 9 3 4 -5\") // return \"9 -5\"\n```\n```kotlin\nhighAndLow(\"1 2 3 4 5\")  // return \"5 1\"\nhighAndLow(\"1 2 -3 4 5\") // return \"5 -3\"\nhighAndLow(\"1 9 3 4 -5\") // return \"9 -5\"\n```\n```elixir\nKata.high_and_low(\"1 2 3 4 5\")  # return \"5 1\"\nKata.high_and_low(\"1 2 -3 4 5\") # return \"5 -3\"\nKata.high_and_low(\"1 9 3 4 -5\") # return \"9 -5\"\n```\n```clojure\n(high-and-low \"1 2 3 4 5\")  ; return \"5 1\"\n(high-and-low \"1 2 -3 4 5\") ; return \"5 -3\"\n(high-and-low \"1 9 3 4 -5\") ; return \"9 -5\"\n```\n```julia\nhighandlow(\"1 2 3 4 5\")  # return \"5 1\"\nhighandlow(\"1 2 -3 4 5\") # return \"5 -3\"\nhighandlow(\"1 9 3 4 -5\") # return \"9 -5\"\n```\n```rust\nhigh_and_low(\"1 2 3 4 5\")  // return \"5 1\"\nhigh_and_low(\"1 2 -3 4 5\") // return \"5 -3\"\nhigh_and_low(\"1 9 3 4 -5\") // return \"9 -5\"\n```\n```cobol\n        HighAndLow(\"1 2 3 4 5\")\n      * RESULT = \"5 1\"\n        HighAndLow(\"1 2 -3 4 5\")\n      * RESULT = \"5 -3\"\n        HighAndLow(\"1 9 3 4 -5\")\n      * RESULT = \"9 -5\"\n```\n```scala\nSol.high_and_low(\"1 2 3 4 5\")  // return \"5 1\"\nSol.high_and_low(\"1 2 -3 4 5\") // return \"5 -3\"\nSol.high_and_low(\"1 9 3 4 -5\") // return \"9 -5\"\n```\n```lua\nhigh_and_low \"1 2 3 4 5\"   --> return \"5 1\"\nhigh_and_low \"1 2 -3 4 5\"  --> return \"5 -3\"\nhigh_and_low \"1 9 3 4 -5\"  --> return \"9 -5\"\n```\n\n### Notes\n\n- All numbers are valid ```Int32```, no *need* to validate them.\n- There will always be at least one number in the input string.\n- Output string must be two numbers separated by a single space, and highest number is first.\n",
  "apiVersion": 2,
  "tags": [
    "Fundamentals",
    "Strings"
  ],
  "totalAttempts": 692876,
  "totalCompleted": 195452,
  "totalStars": 2270
}