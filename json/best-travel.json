{
  "id": "55e7280b40e1c4a06d0000aa",
  "name": "Best travel",
  "slug": "best-travel",
  "category": "reference",
  "publishedAt": "2015-09-02T17:49:43.492Z",
  "approvedAt": "2015-11-06T23:58:46.816Z",
  "languages": [
    "ruby",
    "python",
    "haskell",
    "java",
    "csharp",
    "clojure",
    "javascript",
    "coffeescript",
    "cpp",
    "php",
    "c",
    "rust",
    "swift",
    "crystal",
    "typescript",
    "go",
    "fsharp",
    "r",
    "shell",
    "ocaml",
    "kotlin",
    "elixir",
    "scala",
    "julia",
    "powershell",
    "nim",
    "reason",
    "racket",
    "fortran",
    "dart",
    "pascal",
    "perl",
    "elm",
    "d",
    "erlang",
    "prolog"
  ],
  "url": "https://www.codewars.com/kata/55e7280b40e1c4a06d0000aa",
  "rank": {
    "id": -5,
    "name": "5 kyu",
    "color": "yellow"
  },
  "createdAt": "2015-09-02T16:47:10.162Z",
  "createdBy": {
    "username": "g964",
    "url": "https://www.codewars.com/users/g964"
  },
  "approvedBy": "joh_pot",
  "description": "John and Mary want to travel between a few towns A, B, C ... Mary has on a sheet of paper a list of distances between these towns.\n`ls = [50, 55, 57, 58, 60]`.\nJohn is tired of driving and he says to Mary that he doesn't want to drive more than `t = 174 miles` and he\nwill visit only `3` towns.\n\nWhich distances, hence which towns, they will choose so that the sum of the distances is the biggest possible to please Mary and John?\n\n#### Example: \n\nWith list `ls` and 3 towns to visit they can make a choice between: \n`[50,55,57],[50,55,58],[50,55,60],[50,57,58],[50,57,60],[50,58,60],[55,57,58],[55,57,60],[55,58,60],[57,58,60]`.\n\nThe sums of distances are then:\n`162, 163, 165, 165, 167, 168, 170, 172, 173, 175`.\n\nThe biggest possible sum taking a limit of `174` into account is then `173` and the distances of the `3` \ncorresponding towns is `[55, 58, 60]`.\n\nThe function `chooseBestSum` (or `choose_best_sum` or ... depending on the language) will take as parameters `t` (maximum sum of distances, integer >= 0), `k` (number of towns to visit, k >= 1) \nand `ls` (list of distances, all distances are positive or zero integers and this list has at least one element).\nThe function returns the \"best\" sum ie the biggest possible sum of `k` distances less than or equal to the given limit `t`, if that sum exists,\nor otherwise nil, null, None, Nothing, depending on the language. In that case with C, C++, D, Dart, Fortran, F#, Go, Julia, Kotlin, Nim, OCaml, Pascal, Perl, PowerShell, Reason, Rust, Scala, Shell, Swift return `-1`.\n\n#### Examples: \n\n`ts = [50, 55, 56, 57, 58]`\n`choose_best_sum(163, 3, ts) -> 163`\n\n`xs = [50]`\n`choose_best_sum(163, 3, xs) -> nil (or null or ... or -1 (C++, C, D, Rust, Swift, Go, ...)`\n\n`ys = [91, 74, 73, 85, 73, 81, 87]`\n`choose_best_sum(230, 3, ys) -> 228`\n\n#### Notes: \n- try not to modify the input list of distances `ls`\n- in some languages this \"list\" is in fact a *string* (see the Sample Tests). \n",
  "apiVersion": 2,
  "tags": [
    "Fundamentals"
  ],
  "totalAttempts": 151773,
  "totalCompleted": 15512,
  "totalStars": 2362
}