{
  "id": "5782b5ad202c0ef42f0012cb",
  "name": "Simple Encryption #2 - Index-Difference",
  "slug": "simple-encryption-number-2-index-difference",
  "category": "algorithms",
  "publishedAt": "2016-07-10T20:57:55.327Z",
  "approvedAt": "2016-09-03T15:05:57.261Z",
  "languages": [
    "csharp",
    "javascript",
    "python",
    "cpp",
    "typescript",
    "clojure"
  ],
  "url": "https://www.codewars.com/kata/5782b5ad202c0ef42f0012cb",
  "rank": {
    "id": -5,
    "name": "5 kyu",
    "color": "yellow"
  },
  "createdAt": "2016-07-10T20:53:01.722Z",
  "createdBy": {
    "username": "user5036852",
    "url": "https://www.codewars.com/users/user5036852"
  },
  "approvedBy": "smile67",
  "description": "For encrypting strings this region of chars is given (in this order!):\n\n* all letters (ascending, first all UpperCase, then all LowerCase)\n* all digits (ascending)\n* the following chars: `.,:;-?! '()$%&\"` \n\nThese are 77 chars! (This region is zero-based.)<br/>\n\nWrite two methods: <br/>\n```csharp\nstring Encrypt(string text)\nstring Decrypt(string encryptedText)\n```\n```javascript\nfunction encrypt(text)\nfunction decrypt(encryptedText)\n```\n```typescript\nexport function encrypt(text:string):string\nexport function decrypt(encryptedText:string):string\n```\n```python\ndef encrypt(text)\ndef decrypt(encrypted_text)\n```\n```cpp\nstd::string encrypt(std::string text)\nstd::string decrypt(std::string text)\n```\n```clojure\n(encrypt (text))\n(decrypt (text))\n```\n\nPrechecks:<br>\n1. If the input-string has chars, that are not in the region, throw an Exception(C#, Python) or Error(JavaScript).<br>\n2. If the input-string is null or empty return exactly this value!<br>\n\nFor building the encrypted string:<br>\n1. For every second char do a switch of the case.<br>\n2. For every char take the index from the region. Take the difference from the region-index of the char before (from the input text! Not from the fresh encrypted char before!). (Char2 = Char1-Char2)<br>\nReplace the original char by the char of the difference-value from the region. In this step the first letter of the text is unchanged.<br>\n3. Replace the first char by the mirror in the given region. (`'A' -> '\"'`, `'B' -> '&'`, ...)\n\nSimple example:\n\n* Input:  `\"Business\"`\n* Step 1: `\"BUsInEsS\"`\n* Step 2: `\"B61kujla\"`\n  * `B -> U`\n    * `B (1) - U (20) = -19`\n    * `-19 + 77 = 58`\n    * `Region[58] = \"6\"`\n  * `U -> s`\n    * `U (20) - s (44) = -24`\n    * `-24 + 77 = 53`\n    * `Region[53] = \"1\"`\n* Step 3: `\"&61kujla\"`\n\nThis kata is part of the Simple Encryption Series:<br>\n<a href=\"https://www.codewars.com/kata/simple-encryption-number-1-alternating-split\" taget=_blank>Simple Encryption #1 - Alternating Split</a><br>\n<a href=\"https://www.codewars.com/kata/simple-encryption-number-2-index-difference\" taget=_blank>Simple Encryption #2 - Index-Difference</a><br>\n<a href=\"https://www.codewars.com/kata/simple-encryption-number-3-turn-the-bits-around\" taget=_blank>Simple Encryption #3 - Turn The Bits Around</a><br>\n<a href=\"https://www.codewars.com/kata/simple-encryption-number-4-qwerty\" taget=_blank>Simple Encryption #4 - Qwerty</a><br>\n\nHave fun coding it and please don't forget to vote and rank this kata! :-)",
  "apiVersion": 2,
  "tags": [
    "Fundamentals",
    "Cryptography",
    "Security",
    "Strings",
    "Arrays",
    "Algorithms"
  ],
  "totalAttempts": 7974,
  "totalCompleted": 634,
  "totalStars": 195
}