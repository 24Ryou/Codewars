{
  "id": "54dc6f5a224c26032800005c",
  "name": "Help the bookseller !",
  "slug": "help-the-bookseller",
  "category": "reference",
  "publishedAt": "2015-02-12T09:42:32.903Z",
  "approvedAt": "2015-04-11T00:14:40.147Z",
  "languages": [
    "java",
    "ruby",
    "python",
    "csharp",
    "javascript",
    "clojure",
    "haskell",
    "coffeescript",
    "cpp",
    "php",
    "c",
    "typescript",
    "swift",
    "crystal",
    "r",
    "shell",
    "ocaml",
    "fsharp",
    "julia",
    "scala",
    "go",
    "nim",
    "rust",
    "racket",
    "kotlin",
    "groovy",
    "dart",
    "pascal",
    "lua",
    "perl",
    "elm",
    "d",
    "erlang",
    "prolog"
  ],
  "url": "https://www.codewars.com/kata/54dc6f5a224c26032800005c",
  "rank": {
    "id": -6,
    "name": "6 kyu",
    "color": "yellow"
  },
  "createdAt": "2015-02-12T09:16:10.907Z",
  "createdBy": {
    "username": "g964",
    "url": "https://www.codewars.com/users/g964"
  },
  "approvedBy": "jhoffner",
  "description": "A bookseller has lots of books classified in 26 categories labeled A, B, ... Z. \nEach book has a code `c` of 3, 4, 5 or more characters. The **1st** character of a code is a capital letter which defines the book category.\n  \n  In the bookseller's stocklist each code `c` is followed by a space and by a positive integer n (int n >= 0) \n  which indicates the quantity of books of this code in stock.\n\nFor example an extract of a stocklist could be:\n```\nL = {\"ABART 20\", \"CDXEF 50\", \"BKWRK 25\", \"BTSQZ 89\", \"DRTYM 60\"}.\nor\nL = [\"ABART 20\", \"CDXEF 50\", \"BKWRK 25\", \"BTSQZ 89\", \"DRTYM 60\"] or ....\n```\n\n  You will be given a stocklist (e.g. : L) and a list of categories in capital letters \n  e.g : \n```\nM = {\"A\", \"B\", \"C\", \"W\"} \nor\nM = [\"A\", \"B\", \"C\", \"W\"] or ...\n```\n  \n  and your task is to find all the books of L with codes \n  belonging to each category of M and to sum their quantity according to each category. \n\n\n  For the lists L and M of example you have to return the string (in Haskell/Clojure/Racket/Prolog a list of pairs):  \n  ```\n  (A : 20) - (B : 114) - (C : 50) - (W : 0)\n  ```  \n\n  where A, B, C, W are the categories, 20 is the sum of the unique book of category A, 114 the sum corresponding\n  to \"BKWRK\" and \"BTSQZ\", 50 corresponding to \"CDXEF\" and 0 to category 'W' since there are no code beginning with W.\n\n  If L or M are empty return string is `\"\"` (Clojure/Racket/Prolog should return an empty array/list instead).\n  \n#### Notes:\n- In the result codes and their values are in the same order as in M.\n- See \"Samples Tests\" for the return.\n",
  "apiVersion": 2,
  "tags": [
    "Fundamentals",
    "Algorithms"
  ],
  "totalAttempts": 164058,
  "totalCompleted": 22498,
  "totalStars": 1047
}