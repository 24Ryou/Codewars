{
  "id": "54d496788776e49e6b00052f",
  "name": "Sum by Factors",
  "slug": "sum-by-factors",
  "category": "algorithms",
  "publishedAt": "2015-02-06T14:31:14.771Z",
  "approvedAt": "2015-06-05T18:58:35.793Z",
  "languages": [
    "java",
    "python",
    "csharp",
    "ruby",
    "clojure",
    "haskell",
    "javascript",
    "coffeescript",
    "cpp",
    "typescript",
    "elixir",
    "php",
    "crystal",
    "c",
    "rust",
    "swift",
    "fsharp",
    "r",
    "shell",
    "ocaml",
    "kotlin",
    "fortran",
    "groovy",
    "julia",
    "scala",
    "powershell",
    "go",
    "nim",
    "reason",
    "racket",
    "vb",
    "haxe",
    "commonlisp",
    "dart",
    "lua",
    "pascal",
    "perl",
    "elm",
    "cobol",
    "d",
    "erlang",
    "prolog"
  ],
  "url": "https://www.codewars.com/kata/54d496788776e49e6b00052f",
  "rank": {
    "id": -4,
    "name": "4 kyu",
    "color": "blue"
  },
  "createdAt": "2015-02-06T10:24:56.266Z",
  "createdBy": {
    "username": "g964",
    "url": "https://www.codewars.com/users/g964"
  },
  "approvedBy": "jhoffner",
  "description": "Given an array of positive or negative integers \n\n<code> I= [i<sub>1</sub>,..,i<sub>n</sub>]</code>\n\nyou have to produce a sorted array P of the form \n\n<code>[ [p, sum of all i<sub>j</sub> of I for which p is a prime factor (p positive) of i<sub>j</sub>] ...]</code>\n\nP will be sorted by increasing order of the prime numbers.\nThe final result has to be given as a string in Java, C#, C, C++ and as an array of arrays in other languages.\n\n#### Example:\n\n```fortran\nI = (/12, 15/); // result = \"(2 12)(3 27)(5 15)\"\n```\n```python\nI = [12, 15] # result = [[2, 12], [3, 27], [5, 15]]\n```\n```elixir\nI = [12, 15] # result = [{2, 12}, {3, 27}, {5, 15}]\n```\n```rust\nI = [12, 15] # result = [(2, 12), (3, 27), (5, 15)]\n```\n```swift\nI = [12, 15] # result = [(2, 12), (3, 27), (5, 15)]\n```\n```ruby\nI = [12, 15] # result = [[2, 12], [3, 27], [5, 15]]\n```\n```java\nI = {12, 15}; // result = \"(2 12)(3 27)(5 15)\"\n```\n```cpp\nI = {12, 15}; // result = \"(2 12)(3 27)(5 15)\"\n```\n```c\nI = {12, 15}; // result = \"(2 12)(3 27)(5 15)\"\n```\n```csharp\nI = {12, 15}; // result = \"(2 12)(3 27)(5 15)\"\n```\n```clojure\nI = [12, 15] ; result = [[2, 12], [3, 27], [5, 15]]\n```\n```haskell\nI = [12, 15] -- result = [(2,12),(3,27),(5,15)]\n```\n```javascript\nI = [12, 15]; //result = [[2, 12], [3, 27], [5, 15]]\n```\n```coffeescript\nI = [12, 15] # result = [[2, 12], [3, 27], [5, 15]]\n```\n```typescript\nI = [12, 15]; //result = [[2, 12], [3, 27], [5, 15]]\n```\n```php\nI = [12, 15]; //result = [[2, 12], [3, 27], [5, 15]]\n```\n```cobol\n       I = [12, 15]\n      * result = [[2, 12], [3, 27], [5, 15]]\n```\n[2, 3, 5] is the list of all prime factors of the elements of I, hence the result.\n\n**Notes:**\n- It can happen that a sum is 0 if some numbers are negative!\n\nExample: I = [15, 30, -45]\n5 divides 15, 30 and (-45) so 5 appears in the result, the sum of the numbers for which 5 is a factor is 0 so we have [5, 0] in the result amongst others. \n\n- In Fortran - as in any other language - the returned string is not permitted to contain any redundant trailing whitespace: you can use dynamically allocated character strings.\n\n\n",
  "apiVersion": 2,
  "tags": [
    "Arrays",
    "Algorithms",
    "Mathematics"
  ],
  "totalAttempts": 153068,
  "totalCompleted": 15023,
  "totalStars": 1295
}